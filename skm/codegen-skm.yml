schema: './src/lib/modules/**/typedefs/*.gql'
overwrite: true
# documents:
#   - './packages/client/src/graphql/**/*.gql'
generates:
  ./src/lib/modules/:
    preset: graphql-modules
    presetConfig:
      importBaseTypesFrom: '../../../graphql/_gen/global-types'
      baseTypesPath: ../graphql/_gen/global-types.ts # Where to create the complete schema types!
      filename: _gen/module-types.ts # Where to create each module types!
    plugins:
      - typescript
      - typescript-resolvers

  # ./packages/client/src/_gen/graphql.ts:
  #   plugins:
  #     - typescript
  #     - typescript-operations
  #     - svelte-apollo
  #   config:
  #     clientPath: 'src/graphql/apollo-client'

config:
  # use "import type" instead of "import"
  useTypeImports: true
  # turn enums into types
  # enumsAsTypes: true

  # omitOperationSuffix: true
  # dedupeOperationSuffix: true
  # exportFragmentSpreadSubTypes: true
  # experimentalFragmentVariables: true
  # addUnderscoreToArgsType: true

  # onlyOperationTypes: true
  # preResolveTypes: true

  # namingConvention: keep

  # scalars:
  #   UnsignedInt: number
  #   URL: string
  #   JSON: any # string | number | boolean | null | Array<Scalars['JSON']> | Scalars['JSONObject']
  #   JSONObject: Record<string, any>
  #   Date: string
  #   DateTime: string

hooks:
  afterAllFileWrite:
    - prettier --write
